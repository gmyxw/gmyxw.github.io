<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>linux on sy123.ml</title>
    <link>https://sy123.ml/tags/linux/</link>
    <description>Recent content in linux on sy123.ml</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>2007-2020 Zhili.</copyright>
    <lastBuildDate>Mon, 24 Feb 2020 01:15:09 +0800</lastBuildDate>
    
	<atom:link href="https://sy123.ml/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Vim_search_in_file</title>
      <link>https://sy123.ml/2020/02/24/vim_search_in_file/</link>
      <pubDate>Mon, 24 Feb 2020 01:15:09 +0800</pubDate>
      
      <guid>https://sy123.ml/2020/02/24/vim_search_in_file/</guid>
      <description>总有人问我 Vim 中能不能查找，当然能！而且是超级强的查找！ 这篇文章来详细介绍 Vim 中查找相关的设置和使用方法。 包括查找与替换、查找光标所在词、高亮前景/背景色、切换高亮状态、大小写敏感查找等。
查找 在normal模式下按下/即可进入查找模式，输入要查找的字符串并按下回车。 Vim会跳转到第一个匹配。按下n查找下一个，按下N查找上一个。
Vim查找支持正则表达式，例如/vim$匹配行尾的&amp;quot;vim&amp;rdquo;。 需要查找特殊字符需要转义，例如/vim$匹配&amp;quot;vim$&amp;rdquo;。
注意查找回车应当用\n，而替换为回车应当用\r（相当于）。
大小写敏感查找 在查找模式中加入\c表示大小写不敏感查找，\C表示大小写敏感查找。例如：
/foo\c 将会查找所有的&amp;quot;foo&amp;rdquo;,&amp;ldquo;FOO&amp;rdquo;,&amp;ldquo;Foo&amp;quot;等字符串。
大小写敏感配置 Vim 默认采用大小写敏感的查找，为了方便我们常常将其配置为大小写不敏感：
&amp;quot; 设置默认进行大小写不敏感查找 set ignorecase &amp;quot; 如果有一个大写字母，则切换到大小写敏感查找 set smartcase 将上述设置粘贴到你的~/.vimrc，重新打开Vim即可生效。
查找当前单词 在normal模式下按下*即可查找光标所在单词（word）， 要求每次出现的前后为空白字符或标点符号。例如当前为foo， 可以匹配foo bar中的foo，但不可匹配foobar中的foo。 这在查找函数名、变量名时非常有用。
按下g*即可查找光标所在单词的字符序列，每次出现前后字符无要求。 即foo bar和foobar中的foo均可被匹配到。
其他设置 :set incsearch 可以在敲键的同时搜索，按下回车把移动光标移动到匹配的词； 按下 Esc 取消搜索。
:set wrapscan 用来设置到文件尾部后是否重新从文件头开始搜索。
查找与替换 :s（substitute）命令用来查找和替换字符串。语法如下：
:{作用范围}s/{目标}/{替换}/{替换标志} 例如:%s/foo/bar/g会在全局范围(%)查找foo并替换为bar，所有出现都会被替换（g）。
作用范围 作用范围分为当前行、全文、选区等等。
当前行：
:s/foo/bar/g 全文：
:%s/foo/bar/g 选区，在Visual模式下选择区域后输入:，Vim即可自动补全为 :&amp;lsquo;&amp;lt;,&amp;lsquo;&amp;gt;。
:&amp;lsquo;&amp;lt;,&amp;lsquo;&amp;gt;s/foo/bar/g 2-11行：
:5,12s/foo/bar/g 当前行.与接下来两行+2：
:.,+2s/foo/bar/g 替换标志 上文中命令结尾的g即是替换标志之一，表示全局global替换（即替换目标的所有出现）。 还有很多其他有用的替换标志：
空替换标志表示只替换从光标位置开始，目标的第一次出现：
:%s/foo/bar i表示大小写不敏感查找，I表示大小写敏感：</description>
    </item>
    
    <item>
      <title>linux中如何手动清零缓冲</title>
      <link>https://sy123.ml/2020/02/16/linux%E4%B8%AD%E5%A6%82%E4%BD%95%E6%89%8B%E5%8A%A8%E6%B8%85%E9%9B%B6%E7%BC%93%E5%86%B2/</link>
      <pubDate>Sun, 16 Feb 2020 15:20:03 +0800</pubDate>
      
      <guid>https://sy123.ml/2020/02/16/linux%E4%B8%AD%E5%A6%82%E4%BD%95%E6%89%8B%E5%8A%A8%E6%B8%85%E9%9B%B6%E7%BC%93%E5%86%B2/</guid>
      <description>Emptying the buffers cache If you ever want to empty it you can use this chain of commands.
1 2 3 4 5 6 7 8 9 10  free &amp;amp;&amp;amp; sync &amp;amp;&amp;amp; echo 3 &amp;gt; /proc/sys/vm/drop_caches &amp;amp;&amp;amp; free total used free shared buffers cached Mem: 1018916 980832 38084 0 46924 355764 -/+ buffers/cache: 578144 440772 Swap: 2064376 128 2064248 total used free shared buffers cached Mem: 1018916 685008 333908 0 224 108252 -/+ buffers/cache: 576532 442384 Swap: 2064376 128 2064248   You can signal the Linux Kernel to drop various aspects of cached items by changing the numeric argument to the above command.</description>
    </item>
    
    <item>
      <title>使用systemd-analyze优化系统启动时间</title>
      <link>https://sy123.ml/2020/02/16/%E4%BD%BF%E7%94%A8systemd-analyze%E4%BC%98%E5%8C%96%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E6%97%B6%E9%97%B4/</link>
      <pubDate>Sun, 16 Feb 2020 14:53:24 +0800</pubDate>
      
      <guid>https://sy123.ml/2020/02/16/%E4%BD%BF%E7%94%A8systemd-analyze%E4%BC%98%E5%8C%96%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E6%97%B6%E9%97%B4/</guid>
      <description>systemd-analyze简介 systemd-analyze是Linux自带的分析系统启动性能的工具。
systemd-analyze可使用的命令：
  systemd-analyze [OPTIONS…] [time]
  systemd-analyze [OPTIONS…] blame
  systemd-analyze [OPTIONS…] critical-chain [UNIT…]
  systemd-analyze [OPTIONS…] plot [&amp;gt; file.svg]
  systemd-analyze [OPTIONS…] dot [PATTERN…] [&amp;gt; file.dot]
  systemd-analyze [OPTIONS…] dump
  systemd-analyze [OPTIONS…] set-log-level LEVEL
  systemd-analyze [OPTIONS…] set-log-target TARGET
  systemd-analyze [OPTIONS…] get-log-level
  systemd-analyze [OPTIONS…] get-log-target
  systemd-analyze [OPTIONS…] syscall-filter [SET…]
  systemd-analyze [OPTIONS…] verify [FILES…]</description>
    </item>
    
    <item>
      <title>Socket programing Permission denied</title>
      <link>https://sy123.ml/2020/02/05/socket-programing-permission-denied/</link>
      <pubDate>Wed, 05 Feb 2020 16:04:13 +0800</pubDate>
      
      <guid>https://sy123.ml/2020/02/05/socket-programing-permission-denied/</guid>
      <description>listen tcp :443: bind: permission denied If you want to bind to a privileged port (ports less than 1024). You either need to be root or have the CAP_NET_BIND_SERVICE capability.</description>
    </item>
    
    <item>
      <title>Linux yay 命令</title>
      <link>https://sy123.ml/2020/02/05/linux-yay-%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Wed, 05 Feb 2020 12:57:49 +0800</pubDate>
      
      <guid>https://sy123.ml/2020/02/05/linux-yay-%E5%91%BD%E4%BB%A4/</guid>
      <description>又一个酸奶：Arch Linux的一个实用程序，用于从Arch User Repository构建和安装软件包。
另见pacman。
从repos和AUR交互式搜索和安装包： 1  yay {{package_name|search_term}}   同步和更新repos和AUR中的所有包： 1  yay   仅同步和更新AUR包： 1  yay -Sua   从repos和AUR安装新包： 1  yay -S {{package_name}}   在包数据库中搜索repos和AUR中的关键字： 1  yay -Ss {{keyword}}   显示已安装包和系统运行状况的统计信息： 1  yay -Ps   </description>
    </item>
    
    <item>
      <title>Linux_disable_IPv6</title>
      <link>https://sy123.ml/2020/01/31/linux_disable_ipv6/</link>
      <pubDate>Fri, 31 Jan 2020 12:32:48 +0800</pubDate>
      
      <guid>https://sy123.ml/2020/01/31/linux_disable_ipv6/</guid>
      <description>IPv6被认为是IPv4的替代产品，它用来解决现有IPv4地址空间即将耗尽的问题。 但目前，开启IPv6可能会导致一些问题。因此有时我们需要关闭IPv6。 下面是IPv6的关闭方法应该适用于所有主流的Linux发行版包括Ubuntu、Debian、CentOS。
IPv6在CentOS6.5系统中默认是启用状态，通过以下方式可以确认IPv6的状态
1.1.查看系统IPv6的启用状态 以下命令返回值为0表示IPv6启用，1表示禁用
1 2 3 4 5  cat /proc/sys/net/ipv6/conf/all/disable_ipv6 cat /proc/sys/net/ipv6/conf/default/disable_ipv6 ifconfig ip address list netstat -anptl   1.2.查看内核模块调用 有返回结果，说明IPv6模块已启用，可以看出那些程序进行了调用，反之没有启用
lsmod | grep ipv6
2.禁用IPv6 2.1.临时禁用IPv6 命令行调整内核参数，临时禁用IPv6
1 2 3 4 5  echo 1 &amp;gt;/proc/sys/net/ipv6/conf/all/disable_ipv6 echo 1 &amp;gt;/proc/sys/net/ipv6/conf/default/disable_ipv6 # 或着 sysctl -w net.ipv6.conf.all.disable_ipv6=1 sysctl -w net.ipv6.conf.default.disable_ipv6=1   2.2.永久禁用IPv6 1 2 3 4 5 6 7 8  echo &amp;#34; &amp;#34;&amp;gt;&amp;gt;/etc/sysctl.conf echo &amp;#34;# made for disabled IPv6 in $(date +%F)&amp;#34;&amp;gt;&amp;gt;/etc/sysctl.</description>
    </item>
    
    <item>
      <title>Linux下格式化U盘</title>
      <link>https://sy123.ml/2020/01/26/linux%E4%B8%8B%E6%A0%BC%E5%BC%8F%E5%8C%96u%E7%9B%98/</link>
      <pubDate>Sun, 26 Jan 2020 21:41:53 +0800</pubDate>
      
      <guid>https://sy123.ml/2020/01/26/linux%E4%B8%8B%E6%A0%BC%E5%BC%8F%E5%8C%96u%E7%9B%98/</guid>
      <description>windows下格式化u盘很简单，要么直接右键格式化，要么进入硬盘分区去格式化。那么Linux下呢？ 其实Linux下格式化u盘也十分简单，只需要几条命令就可以了：
查看磁盘情况 sudo fdisk -l 可以看到有一个/dev/sdb的磁盘就是我们插入的u盘了，大小为28.8GB，类型为NTFS。
2. 删除分区 1 2 3 4 5 6  sudo fdisk /dev/sdb m # 获取帮助命令 d # 删除分区 n # 新建分区 p # 打印分区表 w # 写入分区表并退出   一定要记得最后的w命令。
3. 格式化分区 格式化分区只需要使用mkfs.+（format）命令,例如格式化为fat格式，则在终端输入以下命令：
1 2 3  sudo mkfs.vfat -L labelname /dev/sdb1 # -L命令是可选，为你的u盘重新命名 # 最后的/dev/sdb1一定要是设备名   在windows下，我们常用的格式是ntfs，但是Linux默认是不支持ntfs格式的，所以我们需要安装另一个包NTFS-3G：
1 2  sudo pacman -S ntfs-3g sudo mkfs.ntfs -Q -L labelname /dev/sdb1   现在我们就将u盘格式化为ntfs格式了，可以轻松的在windows下使用了。</description>
    </item>
    
    <item>
      <title>Set_all_Java_apps_to_use_GTK&#43;_font_&amp;_theme_settings</title>
      <link>https://sy123.ml/2020/01/22/set_all_java_apps_to_use_gtk-_font__theme_settings/</link>
      <pubDate>Wed, 22 Jan 2020 01:12:54 +0800</pubDate>
      
      <guid>https://sy123.ml/2020/01/22/set_all_java_apps_to_use_gtk-_font__theme_settings/</guid>
      <description>Introduction This fix makes your Java apps use your GTK+ theme (colours &amp;amp; such) &amp;amp; your chosen font settings. Here is how it looks like:
  Java default look   Java GTK+ look   How do you do it? Set the variable _JAVA_OPTIONS by running this command in a terminal:
1  export _JAVA_OPTIONS=&amp;#34;-Dawt.useSystemAAFontSettings=on -Dswing.aatext=true -Dswing.defaultlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel -Dswing.crossplatformlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel ${_JAVA_OPTIONS}&amp;#34;   First test to see if the outcome is what you expect by running your Java app from the same terminal window.</description>
    </item>
    
    <item>
      <title>Linux 让终端走代理的几种方法</title>
      <link>https://sy123.ml/2020/01/11/linux-%E8%AE%A9%E7%BB%88%E7%AB%AF%E8%B5%B0%E4%BB%A3%E7%90%86%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</link>
      <pubDate>Sat, 11 Jan 2020 16:00:15 +0800</pubDate>
      
      <guid>https://sy123.ml/2020/01/11/linux-%E8%AE%A9%E7%BB%88%E7%AB%AF%E8%B5%B0%E4%BB%A3%E7%90%86%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</guid>
      <description>最近使用终端git的时候觉得速度有点慢，考虑一下是不是可以通过让终端走代理的方式来加快速度，尝试了一下以后确实是可以的。如果只是为了设置git的话可以直接在文章最后找到git的设置代理的方法。
前期准备: 认识代理的方式:代理是通过客户端与服务端通信,传输服务端能够访问到的资源文件,再由服务端客户端通信返回给客户端,从而间接访问服务端能访问的资源.
以socket5通信为例子,我们通过客户端(自己想一想酸酸乳)向服务端发送socket通信,服务端访问资源再由socket通信返回给客户端.但是这里面的通信设置必须通过端口来进行通信,类似switchyomega设置过程一样,我们会设定走的代理方式是127.0.0.1:1080;这个意思就是通过本地的1080端口来进行通信.具体在终端上如何使用呢?
如果默认是socket5通信且端口是1080,即127.0.01:1080的方式 使用如下两种方式
socks5://127.0.0.1:1080 这里无关自己代理客户端是不是酸酸乳或酸酸只要是通过socket通信即可,前提是满足已经能够正常代理访问.
第二种是http代理,即通信方式为http而不是socket http://127.0.0.1:12333 详细举例:
这里的客户端有两种方式,一个是socket通信,一个是http通信,两个方式对应的端口不同,在下文中不同代理方式设置的端口也不同. 实在不懂的记住:先把代理调试通,然后就直接打开switchyomega看看自己的设置,都是一样的
方法一：（推荐使用） 为什么说这个方法推荐使用呢？因为他只作用于当前终端中，不会影响环境，而且命令比较简单 在终端中直接运行：
1  export http_proxy=http://proxyAddress:port   如果你是SSR,并且走的http的代理端口是12333，想执行wget或者curl来下载国外的东西，可以使用如下命令：
1  export http_proxy=http://127.0.0.1:12333   如果是https那么就经过如下命令：
1  export https_proxy=http://127.0.0.1:12333   方法二 ： 这个办法的好处是把代理服务器永久保存了，下次就可以直接用了 把代理服务器地址写入shell配置文件.bashrc或者.zshrc 直接在.bashrc或者.zshrc添加下面内容
1 2  export http_proxy=&amp;#34;http://localhost:port&amp;#34; export https_proxy=&amp;#34;http://localhost:port&amp;#34;   或者走socket5协议（ss,ssr）的话，代理端口是1080
1 2  export http_proxy=&amp;#34;socks5://127.0.0.1:1080&amp;#34; export https_proxy=&amp;#34;socks5://127.0.0.1:1080&amp;#34;   或者干脆直接设置ALL_PROXY
1  export ALL_PROXY=socks5://127.0.0.1:1080   最后在执行如下命令应用设置
1  source ~/.</description>
    </item>
    
  </channel>
</rss>