<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>vim on sy123.ml</title>
    <link>https://sy123.ml/tags/vim/</link>
    <description>Recent content in vim on sy123.ml</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>2007-2020 Zhili.</copyright>
    <lastBuildDate>Thu, 12 Mar 2020 21:30:38 +0800</lastBuildDate>
    
	<atom:link href="https://sy123.ml/tags/vim/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>如何在vim保存时获得sudo权限</title>
      <link>https://sy123.ml/2020/03/12/how-does-the-vim-write-with-sudo-trick-work/</link>
      <pubDate>Thu, 12 Mar 2020 21:30:38 +0800</pubDate>
      
      <guid>https://sy123.ml/2020/03/12/how-does-the-vim-write-with-sudo-trick-work/</guid>
      <description>1  :w !sudo tee %   命令:w !{cmd}，让vim执行一个外部命令{cmd}，然后把当前缓冲区的内容从stdin传入。 tee是一个把stdin保存到文件的小工具。 而%，是vim当中一个只读寄存器的名字，总保存着当前编辑文件的文件路径。 所以执行这个命令，就相当于从vim外部修改了当前编辑的文件，好完工。</description>
    </item>
    
    <item>
      <title>vim recording的使用方法</title>
      <link>https://sy123.ml/2020/03/12/vim_recording/</link>
      <pubDate>Thu, 12 Mar 2020 17:05:52 +0800</pubDate>
      
      <guid>https://sy123.ml/2020/03/12/vim_recording/</guid>
      <description>使用vim时无意间触碰到q键，左下角出现“recording”这个标识，觉得好奇，遂在网上查了一下，然后这是vim的一个强大功能。他可以录 制一个宏（Macro)，在开始记录后，会记录你所有的键盘输入，包括在insert模式下的输入、正常模式下使用的各种命令等。
具体使用：
第一步：在正常模式下（非insert模式、非visual模式）按下q键盘
第二步：选择a-z或0-9中任意一个作为缓冲器的名字，准备开始录制宏
第三步：正常的操作，此次所有的操作都会被记录在上一步中定义的缓冲器中
第四步：在非insert模式下输入q停止宏的录制
第五步：使用@ + 第二步中定义的缓冲器的名字即可。
例如想把下面的文字
1 2 3 4 5 6 7 8  line1 line-2 line3-1 l4 line1 line-2 line3-1 l4   变成如下的文字
1 2 3 4 5 6 7 8 9 10  System.out.println(line1); System.out.println(line1); System.out.println(line-2); System.out.println(line3-1); System.out.println(L4); System.out.println(line1); System.out.println(line1); System.out.println(line-2); System.out.println(line3-1); System.out.println(L4);   观察可以发现他们的规律，在每行文字的开头添加“System.out.println(”，结尾添加“);”就变成下面的信息了。下面简单介绍一下如何使用recording来完成这样的操作。 首先把光标移动line1上，输入qt，准备开始录制，缓冲器的名字为t，录制的动作为：shift + ^ 回到行首、按下i键进入insert模式、输入“System.out.println(”、按下esc键回到正常模式、shift + $ 回到行尾部、按下i键进入insert模式、输入“);”按下esc键回到正常模式，按下q停止录制。然后把光标移动到下面一行的任意位置输入 @ + t 即可。
recording还可以和查询结合起来使用，例如想把一个文件中含有特定字符串的行注释，可以通过这样的宏来实现。在正常模式下输入/search string + enter、shift + ^、i、#、esc、shift + $。</description>
    </item>
    
    <item>
      <title>Vim_search_in_file</title>
      <link>https://sy123.ml/2020/02/24/vim_search_in_file/</link>
      <pubDate>Mon, 24 Feb 2020 01:15:09 +0800</pubDate>
      
      <guid>https://sy123.ml/2020/02/24/vim_search_in_file/</guid>
      <description>总有人问我 Vim 中能不能查找，当然能！而且是超级强的查找！ 这篇文章来详细介绍 Vim 中查找相关的设置和使用方法。 包括查找与替换、查找光标所在词、高亮前景/背景色、切换高亮状态、大小写敏感查找等。
查找 在normal模式下按下/即可进入查找模式，输入要查找的字符串并按下回车。 Vim会跳转到第一个匹配。按下n查找下一个，按下N查找上一个。
Vim查找支持正则表达式，例如/vim$匹配行尾的&amp;quot;vim&amp;rdquo;。 需要查找特殊字符需要转义，例如/vim$匹配&amp;quot;vim$&amp;rdquo;。
注意查找回车应当用\n，而替换为回车应当用\r（相当于）。
大小写敏感查找 在查找模式中加入\c表示大小写不敏感查找，\C表示大小写敏感查找。例如：
/foo\c 将会查找所有的&amp;quot;foo&amp;rdquo;,&amp;ldquo;FOO&amp;rdquo;,&amp;ldquo;Foo&amp;quot;等字符串。
大小写敏感配置 Vim 默认采用大小写敏感的查找，为了方便我们常常将其配置为大小写不敏感：
&amp;quot; 设置默认进行大小写不敏感查找 set ignorecase &amp;quot; 如果有一个大写字母，则切换到大小写敏感查找 set smartcase 将上述设置粘贴到你的~/.vimrc，重新打开Vim即可生效。
查找当前单词 在normal模式下按下*即可查找光标所在单词（word）， 要求每次出现的前后为空白字符或标点符号。例如当前为foo， 可以匹配foo bar中的foo，但不可匹配foobar中的foo。 这在查找函数名、变量名时非常有用。
按下g*即可查找光标所在单词的字符序列，每次出现前后字符无要求。 即foo bar和foobar中的foo均可被匹配到。
其他设置 :set incsearch 可以在敲键的同时搜索，按下回车把移动光标移动到匹配的词； 按下 Esc 取消搜索。
:set wrapscan 用来设置到文件尾部后是否重新从文件头开始搜索。
查找与替换 :s（substitute）命令用来查找和替换字符串。语法如下：
:{作用范围}s/{目标}/{替换}/{替换标志} 例如:%s/foo/bar/g会在全局范围(%)查找foo并替换为bar，所有出现都会被替换（g）。
作用范围 作用范围分为当前行、全文、选区等等。
当前行：
:s/foo/bar/g 全文：
:%s/foo/bar/g 选区，在Visual模式下选择区域后输入:，Vim即可自动补全为 :&amp;lsquo;&amp;lt;,&amp;lsquo;&amp;gt;。
:&amp;lsquo;&amp;lt;,&amp;lsquo;&amp;gt;s/foo/bar/g 2-11行：
:5,12s/foo/bar/g 当前行.与接下来两行+2：
:.,+2s/foo/bar/g 替换标志 上文中命令结尾的g即是替换标志之一，表示全局global替换（即替换目标的所有出现）。 还有很多其他有用的替换标志：
空替换标志表示只替换从光标位置开始，目标的第一次出现：
:%s/foo/bar i表示大小写不敏感查找，I表示大小写敏感：</description>
    </item>
    
  </channel>
</rss>