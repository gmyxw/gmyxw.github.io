<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on sy123.ml</title>
    <link>https://sy123.ml/post/</link>
    <description>Recent content in Posts on sy123.ml</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>2007-2020 Zhili.</copyright>
    <lastBuildDate>Tue, 25 Feb 2020 12:39:44 +0800</lastBuildDate>
    
	<atom:link href="https://sy123.ml/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>约定俗成的常见缩写</title>
      <link>https://sy123.ml/2020/02/25/abbreviations/</link>
      <pubDate>Tue, 25 Feb 2020 12:39:44 +0800</pubDate>
      
      <guid>https://sy123.ml/2020/02/25/abbreviations/</guid>
      <description>   全称 缩写     event evt   connect conn   server srv   address addr   request req   response rep   lenght len   collection col   signal sig   error of last number erron   field field   property props   defines defs   object obj   system sys   message msg   number num   directory dir   dictionory dict   protocol proto   button btn   table tbl   label lbl   Image img   Sprite sp   texture tex   tween tw   transform trans   animation anim   material mat   vecter vec   position pos   delegate del   callback cb   acc accessibility   auto automatic   eval evaluate   impl implementation   info in   num number of   min minimum   max maximum   nav navigation   regexp regular expression   util utility   req request   resp response   res resource   app application   auth authorization/authentication 这点非常不认可，同一个常见缩写居然能代表两个不同的词。   dev develop   env environment   db database   pkg package   svr server   i18n internationalization   cert certificate   msg message   addr address   tmp/temp temporary   var/def variable/define 其实 var/def 已经是很多语言的关键字了   calc calculate/calculation   src source   dest destination   min/max minimum/maximum 应该已经不算了吧。。。   doc document   dir directory    </description>
    </item>
    
    <item>
      <title>Copying all files inside subdirectories and renaming instead of overwriting</title>
      <link>https://sy123.ml/2020/02/25/cp_backup/</link>
      <pubDate>Tue, 25 Feb 2020 04:36:20 +0800</pubDate>
      
      <guid>https://sy123.ml/2020/02/25/cp_backup/</guid>
      <description>GNU cp(1) has a backup option:
1  cp --backup SOURCE [SOURCE...] [DESTINATION]   This has the following effects which can be controlled with other options as described in the manual page of cp(1):
1 2 3 4 5 6 7  --backup[=CONTROL] make a backup of each existing destination file -b like --backup but does not accept an argument -S, --suffix=SUFFIX override the usual backup suffix   The backup suffix is ~, unless set with --suffix or SIMPLE_BACKUP_SUFFIX.</description>
    </item>
    
    <item>
      <title>Android Studio preview</title>
      <link>https://sy123.ml/2020/02/24/android_studio_preview/</link>
      <pubDate>Mon, 24 Feb 2020 07:58:36 +0800</pubDate>
      
      <guid>https://sy123.ml/2020/02/24/android_studio_preview/</guid>
      <description>更新 IDE 和 SDK 工具 安装 Android Studio 后，您可以轻松通过自动更新和 Android SDK 管理器让 Android Studio IDE 和 Android SDK 工具保持最新状态。
更新 IDE 和变更版本 若有可用的 IDE 更新，Android Studio 将通过小气泡对话框通知您，不过您也可以依次点击 Help &amp;gt; Check for Update（在 Mac 上，依次点击 Android Studio &amp;gt; Check for Updates）手动检查更新。
您可以通过以下发布版本获取 Android Studio 更新：
Canary 版：这些是前沿版本，大约每周更新一次，可在 developer.android.com/studio/preview 下载。 除了接收 Android Studio 的 Canary 版之外，您还将接收其他 SDK 工具的预览版，包括 Android 模拟器。
虽然这些版本存在较多的错误，但它们已经过测试，我们希望为您提供这些版本，以便您尝试新功能并提供反馈。此版本不推荐用于生产开发。
开发者版：这些是精心挑选的 Canary 版本，已经过全面的内部测试。 测试版：这些是基于稳定 Canary 版的候选版本，这类版本会先收集反馈，然后再作为稳定版进行发布。 稳定版：官方稳定版，可在 developer.android.com/studio 下载。 如果您想要在生产 Android 项目中仍然使用稳定版的同时试用预览版（Canary 版、开发者版或测试版），可以并排安装两个版本。</description>
    </item>
    
    <item>
      <title>Android Studio emulator ugly black borders</title>
      <link>https://sy123.ml/2020/02/24/android_studio_emulator_ugly_black_borders/</link>
      <pubDate>Mon, 24 Feb 2020 04:43:30 +0800</pubDate>
      
      <guid>https://sy123.ml/2020/02/24/android_studio_emulator_ugly_black_borders/</guid>
      <description>Any way to remove the black box behind the emulator? Should run a compositor, something like compton Should try to use xprop WM_CLASS
For the border, likely a compositor is needed or you can start the AVD without a device frame.
For making it floating, add this to your config Floating all windows with &amp;ldquo;android emulator&amp;rdquo; header:
1  for_window [title=&amp;#34;.*Emulator.*&amp;#34;] floating enable   </description>
    </item>
    
    <item>
      <title>Vim_search_in_file</title>
      <link>https://sy123.ml/2020/02/24/vim_search_in_file/</link>
      <pubDate>Mon, 24 Feb 2020 01:15:09 +0800</pubDate>
      
      <guid>https://sy123.ml/2020/02/24/vim_search_in_file/</guid>
      <description>总有人问我 Vim 中能不能查找，当然能！而且是超级强的查找！ 这篇文章来详细介绍 Vim 中查找相关的设置和使用方法。 包括查找与替换、查找光标所在词、高亮前景/背景色、切换高亮状态、大小写敏感查找等。
查找 在normal模式下按下/即可进入查找模式，输入要查找的字符串并按下回车。 Vim会跳转到第一个匹配。按下n查找下一个，按下N查找上一个。
Vim查找支持正则表达式，例如/vim$匹配行尾的&amp;quot;vim&amp;rdquo;。 需要查找特殊字符需要转义，例如/vim$匹配&amp;quot;vim$&amp;rdquo;。
注意查找回车应当用\n，而替换为回车应当用\r（相当于）。
大小写敏感查找 在查找模式中加入\c表示大小写不敏感查找，\C表示大小写敏感查找。例如：
/foo\c 将会查找所有的&amp;quot;foo&amp;rdquo;,&amp;ldquo;FOO&amp;rdquo;,&amp;ldquo;Foo&amp;quot;等字符串。
大小写敏感配置 Vim 默认采用大小写敏感的查找，为了方便我们常常将其配置为大小写不敏感：
&amp;quot; 设置默认进行大小写不敏感查找 set ignorecase &amp;quot; 如果有一个大写字母，则切换到大小写敏感查找 set smartcase 将上述设置粘贴到你的~/.vimrc，重新打开Vim即可生效。
查找当前单词 在normal模式下按下*即可查找光标所在单词（word）， 要求每次出现的前后为空白字符或标点符号。例如当前为foo， 可以匹配foo bar中的foo，但不可匹配foobar中的foo。 这在查找函数名、变量名时非常有用。
按下g*即可查找光标所在单词的字符序列，每次出现前后字符无要求。 即foo bar和foobar中的foo均可被匹配到。
其他设置 :set incsearch 可以在敲键的同时搜索，按下回车把移动光标移动到匹配的词； 按下 Esc 取消搜索。
:set wrapscan 用来设置到文件尾部后是否重新从文件头开始搜索。
查找与替换 :s（substitute）命令用来查找和替换字符串。语法如下：
:{作用范围}s/{目标}/{替换}/{替换标志} 例如:%s/foo/bar/g会在全局范围(%)查找foo并替换为bar，所有出现都会被替换（g）。
作用范围 作用范围分为当前行、全文、选区等等。
当前行：
:s/foo/bar/g 全文：
:%s/foo/bar/g 选区，在Visual模式下选择区域后输入:，Vim即可自动补全为 :&amp;lsquo;&amp;lt;,&amp;lsquo;&amp;gt;。
:&amp;lsquo;&amp;lt;,&amp;lsquo;&amp;gt;s/foo/bar/g 2-11行：
:5,12s/foo/bar/g 当前行.与接下来两行+2：
:.,+2s/foo/bar/g 替换标志 上文中命令结尾的g即是替换标志之一，表示全局global替换（即替换目标的所有出现）。 还有很多其他有用的替换标志：
空替换标志表示只替换从光标位置开始，目标的第一次出现：
:%s/foo/bar i表示大小写不敏感查找，I表示大小写敏感：</description>
    </item>
    
    <item>
      <title>百度云加速NS接入流程</title>
      <link>https://sy123.ml/2020/02/23/baidu_cdn/</link>
      <pubDate>Sun, 23 Feb 2020 04:36:16 +0800</pubDate>
      
      <guid>https://sy123.ml/2020/02/23/baidu_cdn/</guid>
      <description>百度云加速NS接入是最简单的方式，不过还是很多站长管理员不大懂，今天教大家如何NS接入。
首先点域名继续接入 添加子域名，A记录、主机名: WWW，记录值写你的服务器的IP，如果你有其它子域名的也一并添加创建。 创建完子域名后，点一步，查看云加速DNS 复制加速DNS n3060.ns.yunjiasu.com、n333.ns.yunjiasu.com 进入域名注册商管理处，修改NS记录，比如阿里云 修改完成后，等生效即可。需要注意的是，域名修改DNS一般全国生效为24小时左右，所以需要耐心等待了。
好了以上就是百度云加速NS接入的全部教程了，希望可以帮到大家。</description>
    </item>
    
    <item>
      <title>linux中如何手动清零缓冲</title>
      <link>https://sy123.ml/2020/02/16/how_do_you_empty_the_buffers_and_cache_on_linux_system/</link>
      <pubDate>Sun, 16 Feb 2020 15:20:03 +0800</pubDate>
      
      <guid>https://sy123.ml/2020/02/16/how_do_you_empty_the_buffers_and_cache_on_linux_system/</guid>
      <description>Emptying the buffers cache If you ever want to empty it you can use this chain of commands.
1 2 3 4 5 6 7 8 9 10  free &amp;amp;&amp;amp; sync &amp;amp;&amp;amp; echo 3 &amp;gt; /proc/sys/vm/drop_caches &amp;amp;&amp;amp; free total used free shared buffers cached Mem: 1018916 980832 38084 0 46924 355764 -/+ buffers/cache: 578144 440772 Swap: 2064376 128 2064248 total used free shared buffers cached Mem: 1018916 685008 333908 0 224 108252 -/+ buffers/cache: 576532 442384 Swap: 2064376 128 2064248   You can signal the Linux Kernel to drop various aspects of cached items by changing the numeric argument to the above command.</description>
    </item>
    
    <item>
      <title>如何清理Virtualbox虚拟机VDI镜像文件的空间大小</title>
      <link>https://sy123.ml/2020/02/16/virtualbox_vdi_shrink/</link>
      <pubDate>Sun, 16 Feb 2020 15:10:33 +0800</pubDate>
      
      <guid>https://sy123.ml/2020/02/16/virtualbox_vdi_shrink/</guid>
      <description>玩虚拟机的同学都知道，对于那些设定为动态配分的虚拟机，一开始装完系统时可能只有几个G，但是随着你不断的使用，体积空间就会越来越大，随便就是几十个G了。也就是说动态扩展的VDI文件只会大，不会小。这期间，就算你去虚拟机里面删除一些文件，整个虚拟机的镜像文件VDI文件的大小依然不会变小，使其所占用的实际硬盘空间过大，给备份和分享都带来麻烦。因此，今天我们就来研究一下如何解决这个问题，其实很简单。
以下方法，在我自己的64位Ubuntu 14.04和64位win10虚拟机中亲测有效！
步骤1：碎片整理 第一步要做的是碎片整理，整理过程需要一个特定的工具，win系统和linux系统各自有别：
 1、linux系统下  打开虚拟机，执行下面的命令：
1 2  sudo dd if=/dev/zero of=/free bs=1M sudo rm -f /free   一般来说，大约5-10分钟清理完毕，取决于你的系统大小和磁盘空间混乱程度。于是关闭虚拟机，进入下一步。
 2、win系统下  需要下载一个特定的工具，点击此处进入官方下载，如果链接失效，也可以点击此处直接下载我整理好的版本。
下载后解压，取出其中的diskext.exe（针对32位系统）或者diskext64.exe（针对64位系统），将其复制到虚拟机的C盘根目录下，然后以管理员身份在虚拟机中启动命令行cmd，输入以下命令：
1  C:\sdelete64.exe -z c:	# c表示清理c盘   便会自动开始清理磁盘，大约5-10分钟左右方能清理完毕，于是便可关闭虚拟机，进入下一步。
步骤2：镜像压缩 关闭虚拟机，然后通过Virtualbox自带的神器vboxmanage modifyhd中的–compact命令来进行VDI镜像文件的压缩。具体步骤是：
打开cmd命令窗口，并进入Virtualbox所安装的目录（一般是C:\Program Files\Oracle\VirtualBox）目录，然后启动VBoxManage.exe进行VDI镜像文件的压缩，并等待命令结束即可：
1 2  cd &amp;#34;C:\Program Files\Oracle\VirtualBox&amp;#34; VBoxManage.exe modifyhd &amp;#34;E:\V_VtSystem\A_Systems\Ubuntu 14.04.vdi&amp;#34; --compact   实际测试我ubuntu系统由35G压缩成只有20G，win10系统由40G压缩成25G，效果还是非常明显的。</description>
    </item>
    
    <item>
      <title>使用systemd-analyze优化系统启动时间</title>
      <link>https://sy123.ml/2020/02/16/systemd_analyze/</link>
      <pubDate>Sun, 16 Feb 2020 14:53:24 +0800</pubDate>
      
      <guid>https://sy123.ml/2020/02/16/systemd_analyze/</guid>
      <description>systemd-analyze简介 systemd-analyze是Linux自带的分析系统启动性能的工具。
systemd-analyze可使用的命令：
  systemd-analyze [OPTIONS…] [time]
  systemd-analyze [OPTIONS…] blame
  systemd-analyze [OPTIONS…] critical-chain [UNIT…]
  systemd-analyze [OPTIONS…] plot [&amp;gt; file.svg]
  systemd-analyze [OPTIONS…] dot [PATTERN…] [&amp;gt; file.dot]
  systemd-analyze [OPTIONS…] dump
  systemd-analyze [OPTIONS…] set-log-level LEVEL
  systemd-analyze [OPTIONS…] set-log-target TARGET
  systemd-analyze [OPTIONS…] get-log-level
  systemd-analyze [OPTIONS…] get-log-target
  systemd-analyze [OPTIONS…] syscall-filter [SET…]
  systemd-analyze [OPTIONS…] verify [FILES…]</description>
    </item>
    
    <item>
      <title>Saga deprecated 警告</title>
      <link>https://sy123.ml/2020/02/15/saga_deprecated_warning/</link>
      <pubDate>Sat, 15 Feb 2020 22:23:37 +0800</pubDate>
      
      <guid>https://sy123.ml/2020/02/15/saga_deprecated_warning/</guid>
      <description>What happens? 1  [...effects] has been deprecated in favor of all([...effects]), please update your code   it does not effect dva.js, its redux saga api update, you just need to do this
1 2 3 4 5  effects: { * query(action, {call, put, all}) { yield all([]) } }   Redux saga apis:</description>
    </item>
    
    <item>
      <title>Visual Studio Code 偏好设置</title>
      <link>https://sy123.ml/2020/02/15/my_vscode_config/</link>
      <pubDate>Sat, 15 Feb 2020 17:58:47 +0800</pubDate>
      
      <guid>https://sy123.ml/2020/02/15/my_vscode_config/</guid>
      <description>Visual Studio Code 提供了极大的弹性让我们自订想要的编辑器样式，端看使用者设定（User Setting）中，就超过 800 项设定可以让开发者自由调整，而且还有扩充套件能够增强 VS Code 的开发能力。
 这篇主要是我个人偏好的设定，完整 setting.json 请参考 gist。
 首先可以使用快速键 Ctrl +, 开启 settings.json 使用者设定档，或从选单列中点选档案 &amp;gt; 喜好设定 &amp;gt; 设定。
Global 常用设定 editor 1  editor.fontFamily // 设定字型偏好    唯一选择 Source Code Pro 连字符号字型可选择 FiraCode 或 Hasklig 择一使用(个人偏好 FiraCode) 设定值：&amp;quot;editor.fontFamily&amp;quot;: &amp;quot;&#39;Fira Code&#39;, &#39;Source Code Pro&#39;, Consolas, &#39;Microsoft JhengHei&#39;, &#39;Courier New&#39;, monospace&amp;quot;,  1 2 3 4 5 6 7 8 9  &amp;#34;editor.</description>
    </item>
    
    <item>
      <title>umi-ui bug using react-document-title</title>
      <link>https://sy123.ml/2020/02/10/umi-ui_bug_using_react-document-title/</link>
      <pubDate>Mon, 10 Feb 2020 15:41:37 +0800</pubDate>
      
      <guid>https://sy123.ml/2020/02/10/umi-ui_bug_using_react-document-title/</guid>
      <description>背景 React 项目使用umi时发报：
 Uncaught Invariant Violation: React.Children.only expected to receive a single React element child. The above error occurred in the  component ui socket init CloseEvent {type: &amp;ldquo;close&amp;rdquo;, bubbles: false, cancelable: false, timeStamp: 1571127775342, wasClean: false, …}
 异常代码 1 2 3 4 5  &amp;lt;DocumentTitle title={this.renderPageTitle()}&amp;gt; &amp;lt;ContainerQuery query={query}&amp;gt; {(params: any) =&amp;gt; &amp;lt;div className={classNames(params)}&amp;gt;{layout}&amp;lt;/div&amp;gt;} &amp;lt;/ContainerQuery&amp;gt; &amp;lt;/DocumentTitle&amp;gt;   DocumentTitle组件内部最外层只能接受一个元素，而代码中有多个元素，所以报错。
解决方案 用&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;或者&amp;lt;&amp;gt;&amp;lt;/&amp;gt;在外部包裹后就OK，不再报错，页面可正常显示。</description>
    </item>
    
    <item>
      <title>git clone 指定分支拉代码</title>
      <link>https://sy123.ml/2020/02/10/git_clone_branch/</link>
      <pubDate>Mon, 10 Feb 2020 13:07:08 +0800</pubDate>
      
      <guid>https://sy123.ml/2020/02/10/git_clone_branch/</guid>
      <description>git clone 不指定分支 1  git clone http://10.1.1.11/service/tmall-service.git   git clone 指定分支 1  git clone -b dev_jk http://10.1.1.11/service/tmall-service.git   命令中：多了一个 -b dev-jk,这个dev_jk就是分支，http://10.1.1.11/service/tmall -service.git为源码的仓库地址</description>
    </item>
    
    <item>
      <title>Programmatically_navigate_using_react_router</title>
      <link>https://sy123.ml/2020/02/09/programmatically_navigate_using_react_router/</link>
      <pubDate>Sun, 09 Feb 2020 11:33:00 +0800</pubDate>
      
      <guid>https://sy123.ml/2020/02/09/programmatically_navigate_using_react_router/</guid>
      <description>React Router v5.1.0 with hooks There is a new useHistory hook in React Router &amp;gt;5.1.0 if you are using React &amp;gt;16.8.0 and functional components.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  import { useHistory } from &amp;#34;react-router-dom&amp;#34;; function HomeButton() { const history = useHistory(); function handleClick() { history.push(&amp;#34;/home&amp;#34;); } return ( &amp;lt;button type=&amp;#34;button&amp;#34; onClick={handleClick}&amp;gt; Go home &amp;lt;/button&amp;gt; ); }   React Router v4 With v4 of React Router, there are three approaches that you can take to programmatic routing within components.</description>
    </item>
    
    <item>
      <title>npm和yarn如何查看源和换源</title>
      <link>https://sy123.ml/2020/02/06/yarn_accelerate_and_modify_mirror_source_in_china/</link>
      <pubDate>Thu, 06 Feb 2020 18:28:50 +0800</pubDate>
      
      <guid>https://sy123.ml/2020/02/06/yarn_accelerate_and_modify_mirror_source_in_china/</guid>
      <description>npm和yarn查看源和换源： 1 2 3 4 5 6 7  npm config get registry # 查看npm当前镜像源 npm config set registry https://registry.npm.taobao.org/ # 设置npm镜像源为淘宝镜像 yarn config get registry # 查看yarn当前镜像源 yarn config set registry https://registry.npm.taobao.org/ # 设置yarn镜像源为淘宝镜像   镜像源地址部分如下： npm --- https://registry.npmjs.org/ cnpm --- https://r.cnpmjs.org/ taobao --- https://registry.npm.taobao.org/ nj --- https://registry.nodejitsu.com/ rednpm --- https://registry.mirror.cqupt.edu.cn/ npmMirror --- https://skimdb.npmjs.com/registry/ deunpm --- http://registry.enpmjs.org/ </description>
    </item>
    
    <item>
      <title>Socket programing Permission denied</title>
      <link>https://sy123.ml/2020/02/05/linux_privileged_port/</link>
      <pubDate>Wed, 05 Feb 2020 16:04:13 +0800</pubDate>
      
      <guid>https://sy123.ml/2020/02/05/linux_privileged_port/</guid>
      <description>listen tcp :443: bind: permission denied If you want to bind to a privileged port (ports less than 1024). You either need to be root or have the CAP_NET_BIND_SERVICE capability.</description>
    </item>
    
    <item>
      <title>win10输入法不显示候选词解决方法</title>
      <link>https://sy123.ml/2020/02/05/win10_input_method_display_candidate_words/</link>
      <pubDate>Wed, 05 Feb 2020 13:12:53 +0800</pubDate>
      
      <guid>https://sy123.ml/2020/02/05/win10_input_method_display_candidate_words/</guid>
      <description>精简系统后自带的输入法不显示候选词 懒得折腾直接切换成老版本就完事，位置在输入法-设置-常规-使用以前版本的微软拼音输入法 </description>
    </item>
    
    <item>
      <title>Linux yay 命令</title>
      <link>https://sy123.ml/2020/02/05/linux_yay/</link>
      <pubDate>Wed, 05 Feb 2020 12:57:49 +0800</pubDate>
      
      <guid>https://sy123.ml/2020/02/05/linux_yay/</guid>
      <description>又一个酸奶：Arch Linux的一个实用程序，用于从Arch User Repository构建和安装软件包。
另见pacman。
从repos和AUR交互式搜索和安装包： 1  yay {{package_name|search_term}}   同步和更新repos和AUR中的所有包： 1  yay   仅同步和更新AUR包： 1  yay -Sua   从repos和AUR安装新包： 1  yay -S {{package_name}}   在包数据库中搜索repos和AUR中的关键字： 1  yay -Ss {{keyword}}   显示已安装包和系统运行状况的统计信息： 1  yay -Ps   </description>
    </item>
    
    <item>
      <title>Linux_disable_IPv6</title>
      <link>https://sy123.ml/2020/01/31/linux_disable_ipv6/</link>
      <pubDate>Fri, 31 Jan 2020 12:32:48 +0800</pubDate>
      
      <guid>https://sy123.ml/2020/01/31/linux_disable_ipv6/</guid>
      <description>IPv6被认为是IPv4的替代产品，它用来解决现有IPv4地址空间即将耗尽的问题。 但目前，开启IPv6可能会导致一些问题。因此有时我们需要关闭IPv6。 下面是IPv6的关闭方法应该适用于所有主流的Linux发行版包括Ubuntu、Debian、CentOS。
IPv6在CentOS6.5系统中默认是启用状态，通过以下方式可以确认IPv6的状态
1.1.查看系统IPv6的启用状态 以下命令返回值为0表示IPv6启用，1表示禁用
1 2 3 4 5  cat /proc/sys/net/ipv6/conf/all/disable_ipv6 cat /proc/sys/net/ipv6/conf/default/disable_ipv6 ifconfig ip address list netstat -anptl   1.2.查看内核模块调用 有返回结果，说明IPv6模块已启用，可以看出那些程序进行了调用，反之没有启用
lsmod | grep ipv6
2.禁用IPv6 2.1.临时禁用IPv6 命令行调整内核参数，临时禁用IPv6
1 2 3 4 5  echo 1 &amp;gt;/proc/sys/net/ipv6/conf/all/disable_ipv6 echo 1 &amp;gt;/proc/sys/net/ipv6/conf/default/disable_ipv6 # 或着 sysctl -w net.ipv6.conf.all.disable_ipv6=1 sysctl -w net.ipv6.conf.default.disable_ipv6=1   2.2.永久禁用IPv6 1 2 3 4 5 6 7 8  echo &amp;#34; &amp;#34;&amp;gt;&amp;gt;/etc/sysctl.conf echo &amp;#34;# made for disabled IPv6 in $(date +%F)&amp;#34;&amp;gt;&amp;gt;/etc/sysctl.</description>
    </item>
    
    <item>
      <title>Linux下格式化U盘</title>
      <link>https://sy123.ml/2020/01/26/linux%E4%B8%8B%E6%A0%BC%E5%BC%8F%E5%8C%96u%E7%9B%98/</link>
      <pubDate>Sun, 26 Jan 2020 21:41:53 +0800</pubDate>
      
      <guid>https://sy123.ml/2020/01/26/linux%E4%B8%8B%E6%A0%BC%E5%BC%8F%E5%8C%96u%E7%9B%98/</guid>
      <description>windows下格式化u盘很简单，要么直接右键格式化，要么进入硬盘分区去格式化。那么Linux下呢？ 其实Linux下格式化u盘也十分简单，只需要几条命令就可以了：
查看磁盘情况 sudo fdisk -l 可以看到有一个/dev/sdb的磁盘就是我们插入的u盘了，大小为28.8GB，类型为NTFS。
2. 删除分区 1 2 3 4 5 6  sudo fdisk /dev/sdb m # 获取帮助命令 d # 删除分区 n # 新建分区 p # 打印分区表 w # 写入分区表并退出   一定要记得最后的w命令。
3. 格式化分区 格式化分区只需要使用mkfs.+（format）命令,例如格式化为fat格式，则在终端输入以下命令：
1 2 3  sudo mkfs.vfat -L labelname /dev/sdb1 # -L命令是可选，为你的u盘重新命名 # 最后的/dev/sdb1一定要是设备名   在windows下，我们常用的格式是ntfs，但是Linux默认是不支持ntfs格式的，所以我们需要安装另一个包NTFS-3G：
1 2  sudo pacman -S ntfs-3g sudo mkfs.ntfs -Q -L labelname /dev/sdb1   现在我们就将u盘格式化为ntfs格式了，可以轻松的在windows下使用了。</description>
    </item>
    
    <item>
      <title>Set_all_Java_apps_to_use_GTK&#43;_font_&amp;_theme_settings</title>
      <link>https://sy123.ml/2020/01/22/set_all_java_apps_to_use_gtk-_font__theme_settings/</link>
      <pubDate>Wed, 22 Jan 2020 01:12:54 +0800</pubDate>
      
      <guid>https://sy123.ml/2020/01/22/set_all_java_apps_to_use_gtk-_font__theme_settings/</guid>
      <description>Introduction This fix makes your Java apps use your GTK+ theme (colours &amp;amp; such) &amp;amp; your chosen font settings. Here is how it looks like:
  Java default look   Java GTK+ look   How do you do it? Set the variable _JAVA_OPTIONS by running this command in a terminal:
1  export _JAVA_OPTIONS=&amp;#34;-Dawt.useSystemAAFontSettings=on -Dswing.aatext=true -Dswing.defaultlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel -Dswing.crossplatformlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel ${_JAVA_OPTIONS}&amp;#34;   First test to see if the outcome is what you expect by running your Java app from the same terminal window.</description>
    </item>
    
    <item>
      <title>Win10 清除 PowerShell 历史记录</title>
      <link>https://sy123.ml/2020/01/20/historysavepath/</link>
      <pubDate>Mon, 20 Jan 2020 23:11:09 +0800</pubDate>
      
      <guid>https://sy123.ml/2020/01/20/historysavepath/</guid>
      <description>PowerShell&amp;rsquo;s own history mechanism (Get-History, Clear-History) is host-independent, which is why - somewhat unexpectedly - you also need to clear the hosts&amp;rsquo;s command history separately.
As for the console host&amp;rsquo;s own history feature:
doskey-style history feature, before module PSReadline shipped with PowerShell (see below):
There is no saved history - a history is kept only for the duration of the current session. Alt+F7 must be used to clear the console&amp;rsquo;s history, with no (obvious) programmatic way to do it (in a cmd.</description>
    </item>
    
    <item>
      <title>Sysprep命令详解</title>
      <link>https://sy123.ml/2020/01/20/sysprep/</link>
      <pubDate>Mon, 20 Jan 2020 06:12:53 +0800</pubDate>
      
      <guid>https://sy123.ml/2020/01/20/sysprep/</guid>
      <description>如果你打算创建安装映像以部署到不同的计算机上，则必须运行带有 /generalize 选项的 Sysprep 命令，即使其他计算机具有相同的硬件配置。Sysprep /generalize 命令从 Windows 安装删除唯一性信息，这使得你可以在不同的计算机上重复使用映像。下次启动 Windows 映像时，将运行 specialize 配置阶段。
Sysprep 命令行选项 下列命令行选项可用于 Sysprep：
1 2 3 4 5 6 7 8 9 10 11  Sysprep.exe [/oobe | /audit] [/generalize] [/mode:vm] [/reboot | /shutdown | /quit] [/quiet] [/unattend:&amp;lt;answerfile&amp;gt;]   下表列出了 Sysprep 命令行选项：
   选项 描述     /audit 重新启动计算机进入审核模式。审核模式使你可以将其他驱动程序或应用程序添加到 Windows。你还可以在将 Windows 安装发送给最终用户前对其进行测试。例如：   Sysprep /audit 如果指定了应答文件，则 Windows 安装程序的审核模式将运行 auditSystem 和 auditUser 配置阶段。   /generalize 准备要作为映像的 Windows 安装。Sysprep 工具会从 Windows 安装中删除所有唯一的系统信息。Sysprep 将重置安全 ID (SID)，清除所有系统还原点，并删除事件日志。例如：   Sysprep /generalize /shutdown 下次计算机启动时，将运行 specialize 配置阶段。该配置阶段将创建一个新安全 ID (SID)。   /oobe 重新启动计算机进入 OOBE 模式。例如：   Sysprep /generalize /shutdown /oobe OOBE 允许最终用户自定义其 Windows 操作系统、创建用户帐户、命名计算机和执行其他任务。Sysprep 在 OOBE 启动前，将处理应答文件中 oobeSystem 配置阶段的所有设置。   /mode:vm Windows(R) 8 的新增内容。一般化虚拟硬盘 (VHD)，这样可以将其部署为相同虚拟机 (VM) 或虚拟机监控程序上的 VHD。VM 重新启动后，该 VM 可以引导到 OOBE。例如：   Sysprep /generalize /oobe /mode:vm 仅有的适用于 VM 模式的额外交换机为“/reboot”、“/shutdown”和“/quit”。必须使用相同的硬件配置文件在虚拟机或虚拟机监控程序上部署 VHD。例如，如果你已在 Microsoft Hyper-V 中创建 VHD，仅可以使用匹配的硬件配置文件将 VHD 部署到 Microsoft Hyper-V VM。使用不同的硬件配置文件将 VHD 部署到不同的 VM 可能会导致意外的问题。   /reboot 重新启动计算机。可以使用该选项审核计算机并确保首次运行体验正确工作。   /shutdown 在 sysprep 命令完成运行后关闭计算机。   /quiet 运行 Sysprep 工具而不显示屏幕确认消息。如果自动运行 Sysprep 工具，则可以使用该选项。   /quit Sysprep 运行指定命令后，无需重新启动或关闭计算机即可关闭 Sysprep 工具。   /unattend: 在无人参与的安装过程中，将应答文件中的设置应用到 Windows，其中  指定要使用的应答文件的路径和文件名。例如：Sysprep /audit /reboot /unattend:F:\Unattend.</description>
    </item>
    
    <item>
      <title>cmd命令行修改windows虚拟内存pagefile.sys</title>
      <link>https://sy123.ml/2020/01/20/pagefile/</link>
      <pubDate>Mon, 20 Jan 2020 05:36:05 +0800</pubDate>
      
      <guid>https://sy123.ml/2020/01/20/pagefile/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12  # 查看当前设置 wmic pagefile list /format:list # 取消自动管理分页文件大小 wmic computersystem where name=&amp;#34;%computername%&amp;#34; set AutomaticManagedPagefile=False  # 修改页面文件大小 最小1024MB，最大4096MB wmic pagefileset where name=&amp;#34;C:\\pagefile.sys&amp;#34; set InitialSize=1024,MaximumSize=4096 # 重启生效 shutdown -r -t 0   </description>
    </item>
    
    <item>
      <title>ArchLinux配置Samba服务与Windows共享文件</title>
      <link>https://sy123.ml/2020/01/19/share_movie_between_archlinux_and_win7_via_samba/</link>
      <pubDate>Sun, 19 Jan 2020 15:43:57 +0800</pubDate>
      
      <guid>https://sy123.ml/2020/01/19/share_movie_between_archlinux_and_win7_via_samba/</guid>
      <description>由于最近加班，俺的高清下载机中，已经累积了200G+的高清电影了，嘿嘿，看来平时的带宽没浪费，充分利用了。在这之前，由于懒于配置Samba，我都是偷懒，用的SFTP，通过Linux帐号来登录下载机，然后把要看的电影，一个一个的用SFTP的方式，给拖到我的电脑上，再欣赏。其实这样的效率挺低的，而且又浪费硬盘，又浪费时间。
Linux的Samba，为Linux与Linux之间，还有Linux与Windows之间，提供了一种很好的文件共享的方式。周末了，抽了点时间，把Samba给配置好了。这样，就可以直接在我的电脑上，通过共享目录的方式，来访问高清下载机中的高清电影了，还可以直接播放，方便多了……
下面记录一下ArchLinux中配置Samba的过程，留作备份。
首先，是安装Samba，ArchLinux可以直接从源中获取并安装Samba：
1  pacman -S samba   等待数秒，安装成功后，你会在/etc中找到一个叫samba的目录，进入这个目录，有一个默认的配置文件样本，叫做smb.conf.default。这是官方的范本配置文件，里面有详细的注释，和每一个配置项的解释。不过这文件挺长，建议你有空的时候，可以详细看看每个参数的含义。这里俺就不累述了，还是来个简洁点的配置吧：
在/etc/samba目录中，直接建立一个空的smb.conf，然后将如下内容粘贴过去：
1 2 3 4 5 6 7 8 9 10 11  [global] workgroup = WORKGROUP security = user [Movies] path = /home/transmission/Downloads valid users = samba public = no writable = yes printable = no create mask = 0644   这个够简洁了吧？简单说明一下，global配置节，是一个全局配置节，里面配置了两项：
workgroup，这个顾名思义，计算机的工作组名称，比如我是和我的Win7来共享文件，最好把工作组和我的Win7设成通一个工作组，这样方便Win7通过网络发现来找到我的下载机。这里，我的win7工作组名字，就叫做：WORKGROUP了
security，这是指共享目录的安全认证形式，security的值，有两种可以设置：
第一种，是设成上面例子中的user，意思是在访问共享目录的时候，需要通过用户名和密码的方式来认证，可以给共享目录提供一定的安全性保护。
第二种，是设成share，这样的话，网络中的任何人都可以通过共享目录的方式来访问你共享的内容了。
在这里，我选择了用户名与密码认证的方式，所以设成了user
下面的Movies节点，可以有多个(如果你想设置多个共享目录的话)
[Movies] 这里设置的名字，就是能够在Windows中看到的名字，可以随意更改
下面的path，就是你想共享的Linux目录了，我设成了我的Transmission的下载目录。
后面的valid users，是一个用户帐号，也即通过用户名和密码来访问共享目录的那个帐号，如果你把security设成share，这一项可以去掉。
下面是一些权限的设置，以及是否允许访问者有写入共享目录的权限，各个参数可以查看Samba文档，就不一一介绍了。
最后，说一下security设成user后，帐号的设置问题。
首先，你可以添加一个新的Linux帐号，专门用来访问共享目录用。比如，我就添加了一个帐号，叫做Samba</description>
    </item>
    
    <item>
      <title>iptables 禁止端口和开放端口</title>
      <link>https://sy123.ml/2020/01/17/iptables/</link>
      <pubDate>Fri, 17 Jan 2020 22:35:49 +0800</pubDate>
      
      <guid>https://sy123.ml/2020/01/17/iptables/</guid>
      <description>1.首先介绍一下指令和相关配置文件 启动指令:service iptables start
重启指令:service iptables restart
关闭指令:service iptables stop
然后是相关配置:/etc/sysconfig/iptables
如何操作该配置呢？
vim /etc/sysconfig/iptables
然后进去修改即可，修改完了怎么办？这里很多人会想到/etc/rc.d/init.d/iptables save指令，但是一旦你这么干了你刚才的修改内容就白做了。。。
具体方法是：
只修改/etc/sysconfig/iptables 使其生效的办法是修改好后先service iptables restart，然后才调用/etc/rc.d/init.d/iptables save，
因为/etc/rc.d/init.d/iptables save会在iptables服务启动时重新加载，要是在重启之前直接先调用了/etc/rc.d/init.d/iptables save那么你
的/etc/sysconfig/iptables 配置就回滚到上次启动服务的配置了，这点必须注意！！！
2.下面介绍一些指令用法（主要还是man iptables看下相关资料才行）
-A：指定链名
-p：指定协议类型
-d：指定目标地址
&amp;ndash;dport：指定目标端口（destination port 目的端口）
&amp;ndash;sport：指定源端口（source port 源端口）
-j：指定动作类型
3.如果我不像修改文件直接打命令可以吗，当然没问题，步骤如下:
例如我给SSH加放行的语句：
添加input记录： iptables -A INPUT -p tcp &amp;ndash;dport 22 -j ACCEPT
添加output记录： iptables -A OUTPUT -p tcp &amp;ndash;sport 22 -j ACCEPT
最后注意需要再执行一下 /etc/init.d/iptables save，这样这两条语句就保存到刚才那个/etc/sysconfig/iptables 文件中了。
4.接下来说明一下步骤，如果机器不在我身边，我只能SSH进去做iptables规则，那么我必须注意每一步，千万别搞错了，否则就SSH链接不上都有可能！
首先要做的是给咱的SSH进行ACCEPT配置，以免直接无法连接的情况发生:
1.如果SSH端口是22（这里不建议用默认端口最好改掉SSH端口）
iptables -A INPUT -p tcp &amp;ndash;dport 22 -j ACCEPT</description>
    </item>
    
    <item>
      <title>批处理关闭或开启NETBIOS</title>
      <link>https://sy123.ml/2020/01/17/netbios/</link>
      <pubDate>Fri, 17 Jan 2020 19:23:06 +0800</pubDate>
      
      <guid>https://sy123.ml/2020/01/17/netbios/</guid>
      <description>禁用NETBIOS后，局域网内计算机不可以在地址栏用主机名访问你的主机，更安全。
以下为批处理自动关闭netbios脚本:
1 2 3 4 5 6 7 8 9 10 11 12  @echo off rem off_netbios_Self_Del for /L %%a in (1,1,20) do ( wmic nicconfig where index=&amp;#39;%%a&amp;#39; call settcpipnetbios 2 ) cd /d %~dp0 if exist one_time.cmd ( del /f /q %0 exit ) rename %0 one_time.cmd exit   功能: 一键关闭netbios，执行完第二次后自己删除自己。
适用性:， 在win7及win2008测试通过，其它系统没测。
说明: 用法：复制上述脚本随便起个名，扩展名改为bat或者cmd。最好把文件放到开机启动目录，开机就运行。windows下自启动目录如下： C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup
如何开启NETBIOS? 把上述代码第四行最后数字改为1即为开启，改为0即为默认设置，为2时代表关闭（上述代码已默认设为关闭NETBIOS)。
为何要第二次才删除？ 如果是新装或者复制了系统，第一次开机是检测并安装网卡设备。如果未安装完网卡就运行完脚本，那脚本就发挥不了作用。
运行流程： 在运行第一次的时候会自动把本脚本重命名为one_time.cmd 在第二次运行脚本监测到有one_time.cmd文件后会自我删除。 本脚本用for循环20次，每个网卡都尝试关闭NETBIOS,（一般系统有十多个网卡序号）如果不够（不放心）就就把第三行代码由数字20改为30或更多。如果想要查看自己的网卡序号可以在CMD里输入以下命令：wmic nicconfig Get Caption,index</description>
    </item>
    
    <item>
      <title>玩转WSL-用Samba服务替代Win10原生的文件共享</title>
      <link>https://sy123.ml/2020/01/17/wsl_samba/</link>
      <pubDate>Fri, 17 Jan 2020 18:57:51 +0800</pubDate>
      
      <guid>https://sy123.ml/2020/01/17/wsl_samba/</guid>
      <description>习惯了Linux系统的人们，肯定觉得Samba服务更加灵活和方便，那如何在Windows系统上搭建高效的Samba服务呢？本文介绍了通过WSL在Win10系统上，搭建Samba文件共享服务。
背景是家里只有一个台式机，一方面家里人偶尔使用，另一方面，它是家里的数据中心，挂载了多块硬盘。所以系统用的是Windows10，但是为了方便灵活得进行文件共享，一直考虑搭建Samba服务。达到此目的的方案有多种，可以考虑用虚拟机，例如：VMWare、VirtualBox、Hyper-V，也可以考虑使用CygWin，因为Windows10提供了WSL，所以本文介绍了另一种方式，也是运行效率比较高的一种方式，使用WSL搭建Samba服务。
背景知识 Windows文件共享服务 使用网络对外提供文件访问服务，现在广泛用于局域网内部文件的共享，例如：小米盒子、手机、PC机、包括Mac，通过139或445端口。
139 - 早期Windows的SMB运行于NBT（NetBIOS over TCP/IP）上，使用139端口 445 - Windows2000及以上版本，SMB可以直接运行与TCP/IP上，使用445端口，效率更高 对不同版本的Windows做了抓包测试，发现WinXP只访问139端口，Win7同时访问139与445端口，Win10只访问445端口，测试结果如下：
Windows10 win10-err
win10-pkg
Windows7 win7-err
win7-pkg
WindowsXP winxp-err
winxp-pkg
WSL（Windows Subsystem for Linux） 是在Windows10系统上，对Windows内核进行了封装，使其可以直接支持ELF格式的Linux可执行程序，感觉有点像GNU/Windows。 现在基于WSL，已经有了多个Linux发行版，包括Ubuntu、Debian、Suse、Kali等，能够非常方便得在Windows里面运行Linux发行版，学习和使用各种Linux工具，同时也能够将Linux里面各种服务无缝集成到Windows环境中，例如：Samba服务、SSH服务等
Samba服务 为了实现UNIX、Linux等非Windows能够访问Windows的文件共享资源，之前有个大牛将SMB（Server Message Block）协议进行了逆向分析，然后根据逆向分析的协议开发了一套开源软件Samba，可以让UNIX、Linux、Mac等系统能够与Windows之间进行文件共享。目前最新的Samba甚至可以提供AD、DC等服务。
总体方案 根据以上背景知识，在Windows10上通过WSL搭建Samba服务的方案如下：
释放Windows占用的139，445端口 安装WSL和Ubuntu发行版 安装Samba服务，并且配置 更改防火墙配置 最后测试 实施步骤 释放Windows占用的139，445端口 释放139端口 安装完毕的Windows10系统，默认情况下会监听139与445端口，通过netstat -a|findstr LISTENING可以查看： cmd001 禁用NetBIOS over TCP/IP，通过如下操作禁用，在“更改适配器设置”界面，双击对应网卡，打开“以太网状态”界面： netbios001 点击“属性”打开“以太网属性”界面： netbios002 选中“TCP/IPv4”项目，点击“属性”，打开“TCP/IPv4属性”界面： netbios003 点击“高级”并选中“WINS”页签，勾选“禁用TCP/IP上的NetBIOS”： 点击“确定”以后生效，如果有多块网卡，每块网卡都要按照如上步骤操作，操作完毕以后，还是通过netstat命令进行查看，发现139端口已经不再监听。 netbios005 释放445端口 通过“WIN+R”打开运行窗口，输入：services.msc，打开服务管理界面： services001 找到Computer Browser服务，双击该服务打开属性界面，将“启动类型”修改为禁用，并且直接点击“停止”： services002 找到Server服务： services003 双击Server服务，打开属性界面，将“启动类型”修改为禁用，并且直接点击“停止”： services004 设置完毕以后重启系统。 重启完毕以后，再通过netstat -a|findstr LISTENING命令检查端口使用情况，发现445端口已经释放成功。 cmd002 安装WSL和Ubuntu发行版 在“程序和功能”管理界面，点击“启用或关闭Windows功能”，在“Windows功能”列表中，勾选“适用于Linux的Windows子系统”（注意：不同的Windows版本可能名字有所差别，我试验的是17134.</description>
    </item>
    
    <item>
      <title>Windows 下使用 Diskpart 命令分区</title>
      <link>https://sy123.ml/2020/01/16/using_diskpart_to_create/</link>
      <pubDate>Thu, 16 Jan 2020 22:27:22 +0800</pubDate>
      
      <guid>https://sy123.ml/2020/01/16/using_diskpart_to_create/</guid>
      <description>Diskpart 命令简介 Diskpart 命令是 Windows 环境下的一个命令，利用 Diskpart 可实现对硬盘的分区管理，包括创建分区、删除分区、合并（扩展）分区，设置分区后即刻生效，免去了重启电脑的操作。
正常运行该命令时需要系统服务的支持，所以在纯 DOS、XP 内核的 WinPE 环境下都是不能运行的，但是在 Win7 的预安装环境下却是可以的。利用 Diskpart 命令来分区，既不用借助第三方工具，也不会产生 100MB 的“系统保留”分区，其次分区操作直接设置即刻生效，不用重新启动计算机。
利用 Diskpart 命令分区 当安装程序运行到创建磁盘分区界面时按下 Shift+F10 启动命令窗口。
键入 Diskpart 进入 Diskpart 的命令环境，其提示符为 DISKPART&amp;gt;。
在此提示下键入相应命令就可以进行分区操作，具体用到的命令有：
1 2 3 4 5 6  Clean List Select Create Format Exit   这些命令的使用方法可以在 Diskpart 命令提示符下键入 Help 或者通过网络查询，如果不清楚可以查看。
使用 List Disk 命令显示的目标磁盘若为 1 号，则建立分区的步骤如下：以下是命令顺序及操作解释：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  List Disk：显示本机的所有磁盘，以便正确操作目标磁盘 Select Disk 1：选择 0 号磁盘 Clean ：清除 0 号磁盘上的所有分区 Create Partition Primary Size=512000 ：创建主分区，容量为：512000MB Active：激活主分区 Format Quick：快速格式化当前分区 Create Partition Extended：创建扩展分区 Create Partition Logical Size=512000：创建逻辑分区一，容量为：512000MB Format Quick：快速格式化当前分区 Create Partition Logical Size=512000：创建逻辑分区二，容量为：512000MB Format Quick ：快速格式化当前分区 Create Partition Logical ：创建逻辑分区三，大小为剩余的容量 Format Quick ：快速格式化当前分区 Exit ：退出Diskpart命令环境 Exit ：退出命令窗口   这里要注意的是 Diskpart 分区时，一定要选对目标磁盘，当前被选中的磁盘 / 分区前面会有 * 号标志，可以用 List Disk / Partition 来进行查看。</description>
    </item>
    
    <item>
      <title>Linux 让终端走代理的几种方法</title>
      <link>https://sy123.ml/2020/01/11/set_proxy_for_terminal/</link>
      <pubDate>Sat, 11 Jan 2020 16:00:15 +0800</pubDate>
      
      <guid>https://sy123.ml/2020/01/11/set_proxy_for_terminal/</guid>
      <description>最近使用终端git的时候觉得速度有点慢，考虑一下是不是可以通过让终端走代理的方式来加快速度，尝试了一下以后确实是可以的。如果只是为了设置git的话可以直接在文章最后找到git的设置代理的方法。
前期准备: 认识代理的方式:代理是通过客户端与服务端通信,传输服务端能够访问到的资源文件,再由服务端客户端通信返回给客户端,从而间接访问服务端能访问的资源.
以socket5通信为例子,我们通过客户端(自己想一想酸酸乳)向服务端发送socket通信,服务端访问资源再由socket通信返回给客户端.但是这里面的通信设置必须通过端口来进行通信,类似switchyomega设置过程一样,我们会设定走的代理方式是127.0.0.1:1080;这个意思就是通过本地的1080端口来进行通信.具体在终端上如何使用呢?
如果默认是socket5通信且端口是1080,即127.0.01:1080的方式 使用如下两种方式
socks5://127.0.0.1:1080 这里无关自己代理客户端是不是酸酸乳或酸酸只要是通过socket通信即可,前提是满足已经能够正常代理访问.
第二种是http代理,即通信方式为http而不是socket http://127.0.0.1:12333 详细举例:
这里的客户端有两种方式,一个是socket通信,一个是http通信,两个方式对应的端口不同,在下文中不同代理方式设置的端口也不同. 实在不懂的记住:先把代理调试通,然后就直接打开switchyomega看看自己的设置,都是一样的
方法一：（推荐使用） 为什么说这个方法推荐使用呢？因为他只作用于当前终端中，不会影响环境，而且命令比较简单 在终端中直接运行：
1  export http_proxy=http://proxyAddress:port   如果你是SSR,并且走的http的代理端口是12333，想执行wget或者curl来下载国外的东西，可以使用如下命令：
1  export http_proxy=http://127.0.0.1:12333   如果是https那么就经过如下命令：
1  export https_proxy=http://127.0.0.1:12333   方法二 ： 这个办法的好处是把代理服务器永久保存了，下次就可以直接用了 把代理服务器地址写入shell配置文件.bashrc或者.zshrc 直接在.bashrc或者.zshrc添加下面内容
1 2  export http_proxy=&amp;#34;http://localhost:port&amp;#34; export https_proxy=&amp;#34;http://localhost:port&amp;#34;   或者走socket5协议（ss,ssr）的话，代理端口是1080
1 2  export http_proxy=&amp;#34;socks5://127.0.0.1:1080&amp;#34; export https_proxy=&amp;#34;socks5://127.0.0.1:1080&amp;#34;   或者干脆直接设置ALL_PROXY
1  export ALL_PROXY=socks5://127.0.0.1:1080   最后在执行如下命令应用设置
1  source ~/.</description>
    </item>
    
    <item>
      <title>百度云分享下载链接</title>
      <link>https://sy123.ml/2020/01/10/baiduyun_dlink/</link>
      <pubDate>Fri, 10 Jan 2020 07:48:32 +0800</pubDate>
      
      <guid>https://sy123.ml/2020/01/10/baiduyun_dlink/</guid>
      <description>最好是先复制到自己的网盘。
  点击分享，生成链接。
  点击链接，进入页面。在console模式下输入如下代码：
  1 2 3 4 5 6 7 8 9  $.ajax({ type: &amp;#34;POST&amp;#34;, url: &amp;#34;/api/sharedownload?sign=&amp;#34;+yunData.SIGN+&amp;#34;&amp;amp;timestamp=&amp;#34;+yunData.TIMESTAMP, data: &amp;#34;encrypt=0&amp;amp;product=share&amp;amp;uk=&amp;#34;+yunData.SHARE_UK+&amp;#34;&amp;amp;primaryid=&amp;#34;+yunData.SHARE_ID+&amp;#34;&amp;amp;fid_list=%5B&amp;#34;+yunData.FS_ID+&amp;#34;%5D&amp;#34;, dataType: &amp;#34;json&amp;#34;, success: function(d){ window.location.href = d.list[0].dlink; } });   客户端接口加密算法</description>
    </item>
    
    <item>
      <title>Github Pull</title>
      <link>https://sy123.ml/2020/01/08/github_pull/</link>
      <pubDate>Wed, 08 Jan 2020 06:27:26 +0800</pubDate>
      
      <guid>https://sy123.ml/2020/01/08/github_pull/</guid>
      <description>github一直都是在上面拿资源。感觉有点愧对大众。是不是应该奉献自己的力量给github来推动开源的发展呢。 在两个月前第一次在github新建项目，并且push了一套比赛的源码。但。。。今天竟然忘了怎么用git了。又复习了一次。所以这次打算在这里作个笔记。给自己做个的或是给git新手做的也好吧。为互联网贡献一点力量。
安装git和配置就不说了。
进入到等下要push的代码的目录文件夹，打开bash 请输入图片描述
进入到等下要push的代码的目录文件夹，打开bash 请输入图片描述
初始化 1  git init   初始化后在本地代码库会自动创建一个.git隐藏文件，这个就是本地代码库
加载文件 1  git add .   . 是把文件夹里面的所有文件都加载进来
还可以单个加载
1  git add index.html,test.html   四：
提交文件，创建时间点 1  git commit -m &amp;#34;init commit&amp;#34;   -m &amp;ldquo;这里的文件是注释&amp;rdquo;
创建之后可以随时回到这个时间点，可以看到有4个文件被修改了，47个插入，51个删除 请输入图片描述
可以随时用
1  git status   查看git的状态
推送代码 第一次推送的时候要添加远程的代码库到配置
1  git remote add origin master https://github.com/zhong635725959/droplook.git   origin可变，随自己喜欢
推送代码：</description>
    </item>
    
  </channel>
</rss>